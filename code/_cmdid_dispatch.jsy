
async function _mqtt_cmd_evt(target, answer, pkt, ctx) ::
  /* target : on_mqtt_type = {
        mqtt_pkt(pkt, ctx) {}, // generic

        mqtt_auth(pkt, ctx) {},
        mqtt_connect(pkt, ctx) {},
        mqtt_connack(pkt, ctx) {},
        mqtt_disconnect(pkt, ctx) {},

        mqtt_publish(pkt, ctx) {},
        mqtt_subscribe(pkt, ctx) {},
        mqtt_unsubscribe(pkt, ctx) {},

        mqtt_pingreq(pkt, ctx) {},
        mqtt_pingresp(pkt, ctx) {},
    } */

  let pkt_fn = target[`mqtt_${pkt.type}`] || target.mqtt_pkt
  await pkt_fn?.call(target, pkt, ctx)

function _mqtt_cmd_type(target, answer, pkt, ctx) ::
  answer(pkt.type, pkt)
  _mqtt_cmd_evt(target, answer, pkt, ctx)

function _mqtt_cmd_id(target, answer, pkt) ::
  answer(pkt.pkt_id, pkt)


export const _mqtt_cmdids = @[]
  _ => {}    // 0x0 reserved
  _mqtt_cmd_evt   // 0x1 connect
  _mqtt_cmd_type  // 0x2 connack
  _mqtt_cmd_evt   // 0x3 publish
  _mqtt_cmd_id    // 0x4 puback
  _mqtt_cmd_id    // 0x5 pubrec
  _mqtt_cmd_id    // 0x6 pubrel
  _mqtt_cmd_id    // 0x7 pubcomp
  _mqtt_cmd_evt   // 0x8 subscribe
  _mqtt_cmd_id    // 0x9 suback
  _mqtt_cmd_evt   // 0xa unsubscribe
  _mqtt_cmd_id    // 0xb unsuback
  _mqtt_cmd_type  // 0xc pingreq
  _mqtt_cmd_type  // 0xd pingresp
  _mqtt_cmd_evt   // 0xe disconnect
  _mqtt_cmd_type  // 0xf auth

