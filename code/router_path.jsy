// Use [regexparam][] for url-like topic parsing
//  [regexparam]: https://github.com/lukeed/regexparam

import {parse as _rxp_parse} from 'regexparam'
import {_isfn} from './_utils.jsy'
import {with_topic_router} from './with_topic_router.jsy'

export const with_topic_path_router = /* #__PURE__ */
  with_topic_router(mqtt_topic_path_router)


const mqtt_topic = topic_route =>
  topic_route
    .replace @ /[*].*$/, '#'
    .replace @ /:\w[^\/]*/g, '+'

/* From the [MQTT v5 Spec](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Topic_Names_and)
4.7.1.2 Multi-level wildcard -- (‘#’ U+0023)
... MUST be specified either on its own or following a topic level separator.
In either case it MUST be the last character specified in the Topic Filter

4.7.1.3 Single-level wildcard -- (‘+’ U+002B)
...it MUST occupy an entire level of the filter.
*/

export const as_topic_path = (topic_route, id) => @
  id=1,
  topic_route
    .replace @ /#$/, '*' // replace MQTT '#' multi-level wildcard at end
    .replace @ /\+/g, () => `:$${id++}` // replace MQTT '+' single-level wildcards

function _ignore(pkt, params, ctx) :: ctx.done = true

function mqtt_topic_path_router() ::
  let pri_lsts = [[],[]], rm = Symbol()
  let find = topic => _routes_iter(pri_lsts, topic)

  // return duck-type compatible with AbstractTopicRouter in ./with_topic_router
  return @{} find, mqtt_topic,
    add(topic_route, ...args) ::
      let fn = args.pop()
      let priority = args.pop()

      if ! _isfn(fn) ::
        if fn :: throw new TypeError()
        fn = _ignore

      let rte = _rxp_parse @ as_topic_path @ topic_route

      rte.key = topic_route
      rte.tgt = fn
      pri_lsts[priority ? 0 : 1].push(rte)
      return this

    remove(topic_route, priority) ::
      let lst = pri_lsts[priority ? 0 : 1]
      return _route_remove([lst], topic_route)

    clear(priority) ::
      pri_lsts[priority ? 0 : 1] = []
      if null == priority ::
        pri_lsts[1] = [] // null clears both lists

    async invoke(pkt, ctx) ::
      ctx.idx = 0
      ctx.rm = rm

      for let [fn, params] of find(pkt.topic) ::
        let res = await fn(pkt, params, ctx)

        if rm === res ::
          _route_remove(pri_lsts, fn)

        if ctx.done ::
          break
        else ctx.idx++

      if 1 === pkt.qos ::
        await ctx.mqtt.puback(pkt)


function * _routes_iter(all_route_lists, topic) ::
  topic = topic.replace(/^[\/]*/, '/') // ensure '/' prefix for regexparam library
  for let route_list of all_route_lists ::
    for let {keys, pattern, tgt} of route_list ::
      let match = pattern.exec(topic)
      if match ::
        let params = keys
          ? keys.reduce @
              (o, k, i) => (o[k] = match[1+i], o)
              {}
          : match.groups ?? match
        yield [tgt, params]


function _route_remove(all_route_lists, query) ::
  let fn_match = route => @
    route===query
    || route.tgt===query
    || route.key===query
  for let lst of all_route_lists ::
    let i = lst.findIndex(fn_match)
    if 0 <= i ::
      lst.splice(i,1)
      return true
  return false

