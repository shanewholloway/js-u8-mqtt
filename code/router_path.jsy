// Use [regexparam][] for url-like topic parsing
//  [regexparam]: https://github.com/lukeed/regexparam

import {parse as _rxp_parse} from 'regexparam'
import {_isfn} from './_utils.jsy'
import {with_topic_router} from './with_topic_router.jsy'

export const with_topic_path_router = /* #__PURE__ */
  with_topic_router(mqtt_topic_path_router)


const mqtt_topic = topic_route =>
  topic_route
    .replace @ /[*].*$/, '#'
    .replace @ /:\w[^\/]*/g, '+'

/* From the [MQTT v5 Spec](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Topic_Names_and)
4.7.1.2 Multi-level wildcard -- (‘#’ U+0023)
... MUST be specified either on its own or following a topic level separator.
In either case it MUST be the last character specified in the Topic Filter

4.7.1.3 Single-level wildcard -- (‘+’ U+002B)
...it MUST occupy an entire level of the filter.
*/

export const as_topic_path = (topic_route, id) => @
  id=1,
  topic_route
    .replace @ /#$/, '*' // replace MQTT '#' multi-level wildcard at end
    .replace @ /\+/g, () => `:$${id++}` // replace MQTT '+' single-level wildcards

function _ignore(pkt, params, ctx) :: ctx.done = true

function mqtt_topic_path_router() ::
  let pri_lsts = [[],[]], rm = Symbol()
  let find = topic => _routes_iter(pri_lsts, topic)

  // return duck-type compatible with AbstractTopicRouter in ./with_topic_router
  return @{} find, mqtt_topic,
    add(topic_route, ...args) ::
      let fn = args.pop()
      let priority = args.pop()

      if ! _isfn(fn) ::
        if fn :: throw new TypeError()
        fn = _ignore

      let route = _rxp_parse @ as_topic_path(topic_route)
      route.topic = topic_route
      route.tgt = fn
      pri_lsts[priority ? 0 : 1].push(route)
      return this

    remove(query, ...args) ::
      let lst = pri_lsts
      if ('boolean' === typeof args[0]) ::
        lst = [pri_lsts[args.shift() ? 0 : 1]]

      if ('string' === typeof query) ::
        query = @{} topic: query, tgt: args.pop()
      return _route_remove(lst, query)

    count(topic_route) ::
      if ! topic_route ::
        return pri_lsts.reduce((r,l) => r+l.length, 0)

      let count = 0
      for let lst of pri_lsts ::
        for let route of lst ::
          if topic_route === route.topic ::
            count++
      return count

    clear(priority) ::
      if null == priority ::
        pri_lsts = [[],[]] // null clears both lists
      else ::
        pri_lsts[priority ? 0 : 1] = []

    async invoke(pkt, ctx) ::
      ctx.idx = 0
      ctx.rm = rm

      for let [fn, params, route] of find(pkt.topic) ::
        let res = await fn(pkt, params, ctx)

        if rm === res ::
          _route_remove(pri_lsts, route)

        if ctx.done :: break
        else ctx.idx++

      if 1 === pkt.qos ::
        await ctx.mqtt.puback(pkt)


const _regexparam = @{}
  get wild() :: return this['*']
  set wild(v) :: return this['*']=wild

function * _routes_iter(all_route_lists, topic) ::
  topic = topic.replace(/^[\/]*/, '/') // ensure '/' prefix for regexparam library
  for let route of all_route_lists.flat() ::
    let match = route?.pattern.exec(topic)
    if match ::
      let keys = route.keys
      if (keys) ::
        let k, i=0, params={__proto__:_regexparam}
        for (k of keys) ::
          params[k] = match[++i]
        yield [route.tgt, params, route]
      else ::
        yield [route.tgt, match.groups ?? match, route]


function _route_remove(all_route_lists, query) ::
  let n_removed = 0
  for let lst of all_route_lists ::
    let idx_tip = 0
    for let route of lst ::
      if route.topic === query.topic ::
        if null == query.tgt || route.tgt === query.tgt ::
          // skip matching routes to remove from compacted list
          n_removed++
          continue

      lst[idx_tip++] = route

    // truncate remaining list
    lst.length = idx_tip
  return n_removed
