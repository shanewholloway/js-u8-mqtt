import { _isfn, _isstr } from './_utils.jsy'
import { _mqtt_dispatch } from './_dispatch.jsy'

export class MQTTError extends Error ::
  constructor(mqtt_pkt, reason=mqtt_pkt.reason) ::
    // use hex-encoded reasons to match MQTT spec documentation
    super(`[0x${reason.toString(16)}] ${reason.reason}`)
    this.mqtt_pkt = mqtt_pkt
    this.reason = reason

export class MQTTBase ::
  // Handshaking Packets
  async connect(pkt={}) ::
    let cid = pkt.client_id
    if ! _isstr(cid) ::
      // see init_client_id implementation in core.jsy
      pkt.client_id = cid = this.client_id || this.init_client_id(cid)
    this.client_id = cid

    if null == pkt.keep_alive ::
      pkt.keep_alive = 60

    let response = await this._send0('connect', pkt, 'connack')
    if 0 != response[0].reason :: // compare to 0 to coerce to number
      throw new this.MQTTError(response[0])
    return this.conn.on_conn(pkt, response)

  async disconnect(pkt={}) ::
    let response = await this._send0('disconnect', pkt)
    return this.conn.on_dis(pkt, response)

  async auth(pkt={}) ::
    let response = await this._send0('auth', pkt, 'auth')
    if response[0].reason ::
      throw new this.MQTTError(response[0])
    return this.conn.on_auth(pkt, response)

  ping() :: return this._send('pingreq', null, 'pingresp')
  puback({pkt_id}) :: return this._send('puback', {pkt_id})

  // alias: sub
  subscribe(pkt, ex, topic_prefix) ::
    pkt = _as_topics(pkt, ex, topic_prefix)
    let suback = this._send('subscribe', pkt, pkt)
    return this.on_sub?.(suback, pkt) ?? suback

  // alias: unsub
  unsubscribe(pkt, ex, topic_prefix) ::
    pkt = _as_topics(pkt, ex, topic_prefix)
    return this._send('unsubscribe', pkt, pkt)


  post(topic, payload, pub_opt) :: // qos:0
    return this.pub({topic, payload, qos:0}, pub_opt)
  send(topic, payload, pub_opt) :: // qos:1
    return this.pub({topic, payload, qos:1}, pub_opt)
  store(topic, payload, pub_opt) :: // qos:1, retain: 1
    return this.pub({topic, payload, qos:1, retain: 1}, pub_opt)

  // alias: json_post
  obj_post(topic, msg, pub_opt) :: // qos:0
    return this.pub({topic, msg, arg: 'msg', qos:0}, pub_opt)
  // alias: json_send
  obj_send(topic, msg, pub_opt) :: // qos:1
    return this.pub({topic, msg, arg: 'msg', qos:1}, pub_opt)
  // alias: json_store
  obj_store(topic, msg, pub_opt) :: // qos:1, retain: 1
    return this.pub({topic, msg, arg: 'msg', qos:1, retain: 1}, pub_opt)

  // alias: publish -- because 'pub' is shorter for semantic aliases above
  async pub(pkt, pub_opt) ::
    if undefined === pkt.payload ::
      if _isfn(pub_opt) ::
        // pub_opt as a function is fn_encode value
        pub_opt = {fn_encode: pub_opt}

      let msg = pkt.msg, fn_encode = pub_opt?.fn_encode
      if null == msg || _isfn(msg) ::
        // when msg is a function, return closure using fn_encode
        if msg :: pub_opt = {...pub_opt, fn_encode: msg}
        // return a single-value closure to publish packets
        return v => this.pub({...pkt, [pkt.arg || 'payload']: v}, pub_opt)

      // Encode payload from msg; fn_encode allows alternative to JSON.stringify
      pkt.payload = fn_encode
        ? await fn_encode(msg)
        : JSON.stringify(msg)

    if pub_opt ::
      if pub_opt.props ::
        pkt.props = pub_opt.props
      if pub_opt.xform ::
        pkt = pub_opt.xform(pkt) || pkt

    return this._send @ 'publish', pkt,
      pkt.qos ? pkt : null // key


  // Internal API

  /* async _send0(type, pkt) -- provided by conn and transport */
  /* async _send(type, pkt) -- provided by conn and transport */

  _init_dispatch(opt) ::
    this.constructor?._once_()
    let target = @{} __proto__: opt.on_mqtt_type
    target.mqtt_publish ||=
      this._init_router?.(opt, this, target)
    return _mqtt_dispatch(opt, target)

  static _aliases() ::
    return ' publish:pub sub:subscribe unsub:unsubscribe json_post:obj_post json_send:obj_send json_store:obj_store'

  static _once_(klass=this) ::
    klass._once_ = _=>0
    var alias, name, p = klass.prototype
    p.MQTTError = MQTTError
    for alias of klass._aliases().split(/\s+/) ::
      [alias, name] = alias.split(':')
      p[alias] = p[name]


function _as_topics(pkt, ex, topic_prefix) ::
  if ex?.trim :: // string
    topic_prefix = ex
    ex = null

  pkt = @
    pkt.trim // string
      ? {topics:[pkt], ... ex}
    : pkt[Symbol.iterator]
      ? {topics:[... pkt], ... ex}
    : ex ? {...pkt, ...ex}
    : pkt

  if topic_prefix ::
    // particularly useful with shared queues, e.g.
    //   topic_prefix = '$share/some-queue-name/'
    let _prefix_topics = v =>
      v.trim ? topic_prefix+v : v.map(_prefix_topics)

    pkt.topics = pkt.topics.map(_prefix_topics)
  return pkt

