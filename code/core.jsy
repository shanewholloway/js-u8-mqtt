import mqtt_pkt_ctx from 'u8-mqtt-packet/esm/codec_bind.js'
import { MQTTBase } from './base.jsy'
import { _mqtt_conn } from './_conn.jsy'

#IF PLAT_NODEJS
  import {connect as tcp_connect} from 'node:net'
  import {connect as tls_connect} from 'node:tls'

const pkt_api = @{}
  utf8(u8) :: return new TextDecoder('utf-8').decode(u8 || this.payload )
  json(u8) :: return JSON.parse( this.utf8(u8) || null )
  text(u8) :: return this.utf8(u8)

const opt_default = @{}
  sess_stg: globalThis.sessionStorage

export class MQTTCore extends MQTTBase ::
  constructor(opt) ::
    opt = @{} ...opt_default, ...opt
    super()
    this.sess_stg = opt.sess_stg
    this.with(opt)
    this.conn = _mqtt_conn @ this,
      this._init_dispatch(opt)

  with(fns_ns) ::
    for let [k,v] of Object.entries(fns_ns) ::
      if 'function' === typeof v :: this[k] = v
    return this


  static mqtt_ctx(mqtt_level, mqtt_opts, pkt_ctx=pkt_api) ::
    let self = class extends this {}
    self.prototype.mqtt_ctx =
      mqtt_pkt_ctx(mqtt_level, mqtt_opts, pkt_ctx)
    return self


  async conn_emit(evt, arg, err_arg) ::
    this.log_conn?.(evt, arg, err_arg)
    try ::
      let fn_evt = this[await evt] // microtask break using `await evt`
      if fn_evt ::
        await fn_evt.call(this, this, arg, err_arg)
      else if err_arg :: throw err_arg
    catch err ::
      this.on_error(err, evt)

  on_error(err, evt) ::
    console.warn @ '[[u8-mqtt error: %s]]', evt, err


  // automatic Client Id for connect()
  init_client_id(parts=['u8-mqtt--','']) ::
    let sess_stg = this.sess_stg
    let key, cid = sess_stg?.getItem(key=parts.join(' '))
    if ! cid ::
      cid = parts.join @ Math.random().toString(36).slice(2)
      sess_stg?.setItem(key, cid)
    return cid


  //on_error(err, evt) ::
  //  console.warn @ '[[u8-mqtt error: %s]]', evt, err

  //log_conn(evt, arg, err_arg) ::
  //  console.info @ '[[u8-mqtt log: %s]]', evt, arg, err_arg

  on_live(client, is_reconnect) ::
    if is_reconnect ::
      return client.connect()

  // on_ready(client) ::
  // on_reconnect(client) ::
  on_disconnect(client, intentional) ::
    if ! intentional ::
      return client.on_reconnect?.()

  _use_conn(fn_reconnect) ::
    return (this.reconnect = fn_reconnect)?.()
  with_autoreconnect(opt=2000) ::
    if opt.toFixed :: opt = @{} delay: opt
    return this.with @:
      on_reconnect() ::
        this.delay(opt.delay || 2000)
          .then(this.reconnect)
          .then(opt.reconnect, opt.error)

  delay(ms) ::
    return new Promise @ done => setTimeout(done, ms)

  with_async_iter(async_iter, write_u8_pkt) ::
    let on_mqtt_chunk = this.conn.set @
      this.mqtt_ctx,
      write_u8_pkt

    this._msg_loop = @!>
      try ::
        async_iter = await async_iter
        for await (let chunk of async_iter)
          on_mqtt_chunk(chunk)
        this.conn.reset()
      catch err ::
        this.conn.reset(err)

    return this



  #IF PLAT_DENO
    with_tcp(...opt) ::
      opt = this._conn_opt(opt)
      opt.transport = 'tcp'
      return this._use_conn @=>
        this.with_deno_iter @
          Deno.connect(opt)

    with_tls(...opt) ::
      opt = this._conn_opt(opt)
      return this._use_conn @=>
        this.with_deno_iter @
          Deno.connectTls(opt)

    with_deno_iter(conn) ::
      return this.with_async_iter @
        conn.then(Deno.iter),
        async u8_pkt =>
          (await conn).write(u8_pkt)

    _conn_opt([a0, a1, a2]) ::
      // (port, hostname, options) or (url, options)
      if Number.isFinite(a0) ::
        return {...a2, port: a0, hostname: a1}

      a0 = new URL(a0)
      return {...a1, port: a0.port, hostname: a0.hostname}

  #IF PLAT_NODEJS
    with_tcp(...opt) ::
      opt = this._conn_opt(opt)
      return this._use_conn @=>
        this.with_stream @
          tcp_connect(opt)

    with_tls(...opt) ::
      opt = this._conn_opt(opt)
      return this._use_conn @=>
        this.with_stream @
          tls_connect(opt)

    _conn_opt([a0, a1, a2]) ::
      // (port, hostname, options) or (url, options)
      if Number.isFinite(a0) ::
        return {...a2, port: a0, host: a1}
      a0 = new URL(a0)
      return {...a1, port: a0.port, host: a0.hostname}


  with_stream(read_stream, write_stream) ::
    if undefined === write_stream ::
      write_stream = read_stream

    return this.with_async_iter @ read_stream,
      u8_pkt => write_stream.write(u8_pkt)


  with_websock(websock) ::
    if ! websock?.send ::
      websock = new URL(websock || 'ws://127.0.0.1:9001')
      return this._use_conn @=>
        this.with_websock @
          new WebSocket(websock, ['mqtt'])

    websock.binaryType = 'arraybuffer'

    let ready, {readyState} = websock
    if 1 !== readyState ::
      if 0 !== readyState ::
        throw new Error @ 'Invalid WebSocket readyState'

      ready = new Promise @ fn => websock.onopen = fn


    let {conn} = this
    let on_mqtt_chunk = conn.set @
      this.mqtt_ctx,
      async u8_pkt => @
        await ready
        websock.send(u8_pkt)

    websock.onmessage = evt => @ on_mqtt_chunk @ new Uint8Array(evt.data)
    websock.onclose = evt => ::
      if ! evt.wasClean ::
        var err = new Error('websocket connection close')
        err.code = evt.code
        err.reason = evt.reason

      conn.reset(err)

    return this

export { MQTTCore as default }
