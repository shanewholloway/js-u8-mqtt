/*
class AbstractTopicRouter ::
  async invoke(pkt, ctx) ::
  add(topic_route, ...args) ::
  remove(topic_route, priority) ::
  clear(priority) ::
  find(topic) :: // optional
  mqtt_topic(topic_route)
*/

export const with_topic_router = mqtt_topic_router =>
  MQTTKlass => class extends MQTTKlass ::
    static _aliases() ::
      return super._aliases() +
        ' sub_topic:subscribe_topic unsub_topic:unsubscribe_topic'

    _init_router(opt, self, target) ::
      this._subs = []
      let router = this.router = target.router =
        mqtt_topic_router(opt, this, target)
      return router?.invoke

    on_sub(suback, pkt) ::
      suback.pkt = pkt
      this._subs.push(suback)
      return suback
    subs_settled() ::
      return Promise.allSettled @
        this._subs.splice(0,Infinity)

    // alias: sub_topic
    subscribe_topic(topic_route, ...args) ::
      let router = this.router
      router.add @ topic_route, true, args.pop() // handler
      let topic = router.mqtt_topic(topic_route)
      this.subscribe @ topic, ...args // ex, topic_prefix
      return this // fluent api -- return this and track side effects

    // alias: unsub_topic
    unsubscribe_topic(topic_route, ...args) ::
      let router = this.router

      let fn = args.at(-1)?.call ? args.pop() : null
      router.remove @ topic_route, true, fn

      let topic = router.mqtt_topic(topic_route)
      return this.unsubscribe @ topic, ...args // topic_prefix

    // add topic handlers without corresponding subscribe packet
    on_topic(...args) ::
      this.router.add(...args)
      return this

